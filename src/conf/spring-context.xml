<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:websocket="http://www.springframework.org/schema/websocket"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd
        ">
    <!-- 自动扫描组件，这里要把controler下面的 controller去除，他们是在spring3-mvc.xml中配置的，如果不去除会影响事务管理的。   -->
    <context:component-scan base-package="com.zone.test">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 通过扫描的模式，扫描目录 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zone.test.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <context:property-placeholder location="classpath:conf/datasource.properties"/>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${user}"/>
        <property name="password" value="${pwd}"/>
        <!--maxActive: 最大连接数量-->
        <property name="maxActive" value="150"/>
        <!--minIdle: 最小空闲连接-->
        <property name="minIdle" value="5"/>
        <!--maxIdle: 最大空闲连接-->
        <property name="maxIdle" value="20"/>
        <!--initialSize: 初始化连接-->
        <property name="initialSize" value="30"/>
        <!-- 连接被泄露时是否打印 -->
        <property name="logAbandoned" value="true"/>
        <!--removeAbandoned: 是否自动回收超时连接-->
        <property name="removeAbandoned" value="true"/>
        <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->
        <property name="removeAbandonedTimeout" value="10"/>
        <!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒-->
        <property name="maxWait" value="1000"/>
        <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>
        <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="10"/>
        <!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->
        <property name="minEvictableIdleTimeMillis" value="10000"/>
        <property name="validationQuery" value="SELECT 1"/>
        <property name="testWhileIdle" value="true"/>
        <property name="connectionProperties">
            <value>useUnicode=true;characterEncoding=UTF8</value>
        </property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:conf/mybatis.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
        <property name="mapperLocations">
            <list>
                <value>classpath:com/zone/test/sqlmapper/*.xml</value>
            </list>
        </property>
    </bean>


    <!-- transaction manager, use DataSourceTransactionManager -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 个人喜好，当事务管理中配置形式和注解形式混用时，配置形式处理大的策略型的事务处理，注解形式负责个体的，小范围的事务管理，此时需要先设定事务管理的优先级,注解形式的优先级要高于配置形式，即order值小于配置形式-->
    <!-- 当其他情况下，没必要使用混合事务管理时，选择其一即可 -->
    <!-- 配置形式事务管理 -->
    <aop:config>
        <aop:pointcut id="fooServiceMethods" expression="execution(* com.zone.test.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceMethods" order="2"/>
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED" rollback-for="com.zone.test.common.RollBackException"/>
        </tx:attributes>
    </tx:advice>
    <!-- 注解形式事务管理 -->
    <tx:annotation-driven transaction-manager="txManager" order="1"/>
    
    <bean id="webrtc" class="com.zone.test.webrtc.WebRTCHandler"/>
    <bean id="video" class="com.zone.test.webrtc.VideoHandler"/>
    <bean id="webSocketInterceptor" class="com.zone.test.webrtc.WebRTCInterceptor"/>
    <websocket:handlers>
		<websocket:mapping path="/websocket" handler="webrtc"/>
		<websocket:handshake-interceptors>
			<ref bean="webSocketInterceptor"/>
		</websocket:handshake-interceptors>
	</websocket:handlers>
    <websocket:handlers>
        <websocket:mapping path="/video" handler="video"/>
        <websocket:handshake-interceptors>
            <ref bean="webSocketInterceptor"/>
        </websocket:handshake-interceptors>
    </websocket:handlers>

</beans>